// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
const tg = window.Telegram.WebApp;
tg.expand();

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let isAdmin = false;
let currentUser = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', async () => {
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    try {
        const response = await fetch('/api/user_info');
        const userData = await response.json();
        currentUser = userData;
        isAdmin = userData.is_admin;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        const adminButton = document.getElementById('admin-panel-btn');
        if (isAdmin) {
            adminButton.style.display = 'block';
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        loadUpcomingEvents();
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:', error);
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
document.getElementById('upcoming-events-btn').addEventListener('click', () => {
    showContainer('events-container');
    loadUpcomingEvents();
});

document.getElementById('past-events-btn').addEventListener('click', () => {
    showContainer('events-container');
    loadPastEvents();
});

document.getElementById('polls-btn').addEventListener('click', () => {
    showContainer('polls-container');
    loadPolls();
});

if (document.getElementById('admin-panel-btn')) {
    document.getElementById('admin-panel-btn').addEventListener('click', () => {
        if (isAdmin) {
            showContainer('admin-panel');
            loadAdminData();
        } else {
            alert('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
        }
    });
}

// –§—É–Ω–∫—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
async function loadUpcomingEvents() {
    try {
        const response = await fetch('/api/events/upcoming');
        const events = await response.json();
        displayEvents(events, 'events-container');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:', error);
    }
}

async function loadPastEvents() {
    try {
        const response = await fetch('/api/events/past');
        const events = await response.json();
        displayEvents(events, 'events-container');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—à–µ–¥—à–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:', error);
    }
}

async function loadPolls() {
    try {
        const response = await fetch('/api/polls');
        const polls = await response.json();
        displayPolls(polls);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–ø—Ä–æ—Å–æ–≤:', error);
    }
}

// –§—É–Ω–∫—Ü–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
function displayEvents(events, containerId) {
    const container = document.getElementById(containerId);
    container.innerHTML = '';

    events.forEach(event => {
        const eventElement = createEventElement(event);
        container.appendChild(eventElement);
    });
}

function createEventElement(event) {
    const div = document.createElement('div');
    div.className = 'event-card';
    
    const date = new Date(event.date);
    const formattedDate = date.toLocaleString('ru-RU', {
        day: 'numeric',
        month: 'long',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
    });

    div.innerHTML = `
        <h3>${event.title}</h3>
        <p class="event-description">${event.description}</p>
        <p class="event-details">
            <span class="event-date">üìÖ ${formattedDate}</span>
            <span class="event-location">üìç ${event.location}</span>
        </p>
        ${isAdmin ? `
            <div class="admin-controls">
                <button onclick="editEvent(${event.id})" class="button-secondary">‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
                <button onclick="deleteEvent(${event.id})" class="button-danger">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>
            </div>
        ` : ''}
    `;

    return div;
}

function displayPolls(polls) {
    const container = document.getElementById('polls-container');
    container.innerHTML = '';

    polls.forEach(poll => {
        const pollElement = createPollElement(poll);
        container.appendChild(pollElement);
    });
}

function createPollElement(poll) {
    const div = document.createElement('div');
    div.className = 'poll-card';
    
    const endDate = new Date(poll.end_date);
    const formattedEndDate = endDate.toLocaleString('ru-RU', {
        day: 'numeric',
        month: 'long',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
    });

    div.innerHTML = `
        <h3>${poll.title}</h3>
        <p class="poll-description">${poll.description}</p>
        <p class="poll-end-date">–û–∫–æ–Ω—á–∞–Ω–∏–µ: ${formattedEndDate}</p>
        <div class="poll-options">
            ${poll.options.map(option => `
                <div class="poll-option">
                    <input type="radio" name="poll_${poll.id}" value="${option.id}" 
                        ${option.voted ? 'checked' : ''}>
                    <label>${option.text}</label>
                    <span class="vote-count">(${option.votes} –≥–æ–ª–æ—Å–æ–≤)</span>
                </div>
            `).join('')}
        </div>
        ${isAdmin ? `
            <div class="admin-controls">
                <button onclick="editPoll(${poll.id})" class="button-secondary">‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
                <button onclick="deletePoll(${poll.id})" class="button-danger">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>
            </div>
        ` : ''}
    `;

    return div;
}

// –ê–¥–º–∏–Ω—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
async function loadAdminData() {
    if (!isAdmin) return;
    
    try {
        // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        const statsResponse = await fetch('/api/admin/stats');
        const stats = await statsResponse.json();
        displayStats(stats);
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const usersResponse = await fetch('/api/admin/users');
        const users = await usersResponse.json();
        displayUsers(users);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–¥–º–∏–Ω-–¥–∞–Ω–Ω—ã—Ö:', error);
    }
}

function displayStats(stats) {
    document.getElementById('events-stats').innerHTML = `
        <p>–í—Å–µ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π: ${stats.total_events}</p>
        <p>–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö: ${stats.upcoming_events}</p>
        <p>–ü—Ä–æ—à–µ–¥—à–∏—Ö: ${stats.past_events}</p>
    `;
    
    document.getElementById('polls-stats').innerHTML = `
        <p>–í—Å–µ–≥–æ –æ–ø—Ä–æ—Å–æ–≤: ${stats.total_polls}</p>
        <p>–ê–∫—Ç–∏–≤–Ω—ã—Ö: ${stats.active_polls}</p>
        <p>–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: ${stats.completed_polls}</p>
    `;
    
    document.getElementById('users-stats').innerHTML = `
        <p>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.total_users}</p>
        <p>–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: ${stats.active_today}</p>
    `;
}

function displayUsers(users) {
    const tbody = document.getElementById('users-table-body');
    tbody.innerHTML = '';
    
    users.forEach(user => {
        const row = document.createElement('tr');
        const lastSeen = new Date(user.last_seen).toLocaleString('ru-RU');
        
        row.innerHTML = `
            <td>${user.id}</td>
            <td>${user.username || '–ù–µ—Ç username'}</td>
            <td>${lastSeen}</td>
        `;
        
        tbody.appendChild(row);
    });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ–æ—Ä–º —Å–æ–∑–¥–∞–Ω–∏—è
if (document.getElementById('create-event-btn')) {
    document.getElementById('create-event-btn').addEventListener('click', () => {
        if (isAdmin) {
            document.getElementById('create-event-form').style.display = 'block';
        } else {
            alert('–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è');
        }
    });
}

if (document.getElementById('create-poll-btn')) {
    document.getElementById('create-poll-btn').addEventListener('click', () => {
        if (isAdmin) {
            document.getElementById('create-poll-form').style.display = 'block';
        } else {
            alert('–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –æ–ø—Ä–æ—Å—ã');
        }
    });
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function showContainer(containerId) {
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    document.querySelectorAll('.content > div').forEach(container => {
        container.style.display = 'none';
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    document.getElementById(containerId).style.display = 'block';
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É –≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    document.querySelectorAll('.nav-menu button').forEach(button => {
        button.classList.remove('active');
        if (button.getAttribute('data-container') === containerId) {
            button.classList.add('active');
        }
    });
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–æ—Ä–º–∞–º–∏
document.getElementById('event-form').addEventListener('submit', async (e) => {
    e.preventDefault();
    if (!isAdmin) {
        alert('–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è');
        return;
    }
    
    const formData = new FormData(e.target);
    const eventData = {
        title: formData.get('title'),
        description: formData.get('description'),
        date: formData.get('date'),
        location: formData.get('location'),
        category: formData.get('category')
    };
    
    try {
        const response = await fetch('/api/events', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(eventData)
        });
        
        if (response.ok) {
            alert('–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ');
            document.getElementById('create-event-form').style.display = 'none';
            e.target.reset();
            loadUpcomingEvents();
        } else {
            throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
        alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è');
    }
});

document.getElementById('poll-form').addEventListener('submit', async (e) => {
    e.preventDefault();
    if (!isAdmin) {
        alert('–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –æ–ø—Ä–æ—Å—ã');
        return;
    }
    
    const formData = new FormData(e.target);
    const options = Array.from(formData.getAll('options[]')).filter(option => option.trim() !== '');
    
    const pollData = {
        title: formData.get('title'),
        description: formData.get('description'),
        end_date: formData.get('endDate'),
        options: options
    };
    
    try {
        const response = await fetch('/api/polls', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(pollData)
        });
        
        if (response.ok) {
            alert('–û–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω');
            document.getElementById('create-poll-form').style.display = 'none';
            e.target.reset();
            loadPolls();
        } else {
            throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–ø—Ä–æ—Å–∞');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
        alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–ø—Ä–æ—Å–∞');
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Ç–º–µ–Ω—ã —Ñ–æ—Ä–º
document.getElementById('cancel-create').addEventListener('click', () => {
    document.getElementById('create-event-form').style.display = 'none';
    document.getElementById('event-form').reset();
});

document.getElementById('cancel-poll').addEventListener('click', () => {
    document.getElementById('create-poll-form').style.display = 'none';
    document.getElementById('poll-form').reset();
});

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–ø—Ü–∏—è–º–∏ –æ–ø—Ä–æ—Å–∞
document.getElementById('add-option').addEventListener('click', () => {
    const optionsContainer = document.getElementById('poll-options');
    const newOption = document.createElement('div');
    newOption.className = 'poll-option';
    newOption.innerHTML = `
        <input type="text" name="options[]" required>
        <button type="button" class="remove-option">‚úï</button>
    `;
    optionsContainer.appendChild(newOption);
});

document.addEventListener('click', (e) => {
    if (e.target.classList.contains('remove-option')) {
        const optionsContainer = document.getElementById('poll-options');
        if (optionsContainer.children.length > 1) {
            e.target.parentElement.remove();
        } else {
            alert('–î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞');
        }
    }
}); 