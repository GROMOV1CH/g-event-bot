import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, MenuButton, WebAppInfo, MenuButtonWebApp
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from config import settings
from datetime import datetime
from models import User, Event, Reminder, Poll
from sqlalchemy.orm import Session
from sqlalchemy import create_engine
from datetime import datetime, timedelta
import asyncio
import os
import jwt
from aiogram import Bot, Dispatcher, types
from aiogram.types import WebAppInfo
from sqlalchemy.orm import sessionmaker
from models import Base

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.DEBUG  # –ò–∑–º–µ–Ω–∏–ª–∏ —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ DEBUG
)
logger = logging.getLogger(__name__)

logger.info("Starting bot initialization...")
logger.info(f"Bot token: {settings.BOT_TOKEN[:5]}...")
logger.info(f"Database URL: {settings.DATABASE_URL}")
logger.info(f"Webapp URL: {settings.WEBAPP_URL}")
logger.info(f"Admin IDs: {settings.ADMIN_USER_IDS}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
engine = create_engine(settings.DATABASE_URL)
Base.metadata.create_all(bind=engine)
SessionLocal = sessionmaker(bind=engine)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT —Ç–æ–∫–µ–Ω–∞
def generate_token(user_id: int) -> str:
    payload = {
        "user_id": user_id,
        "exp": datetime.utcnow() + timedelta(days=1)
    }
    return jwt.encode(payload, settings.JWT_SECRET, algorithm="HS256")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    logger.debug("Entering start handler")
    logger.info(f"Start command received from user {update.effective_user.id}")
    try:
        db = SessionLocal()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user = db.query(User).filter(User.telegram_id == update.effective_user.id).first()
        if not user:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = User(telegram_id=update.effective_user.id)
            db.add(user)
            db.commit()
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        webapp_button = types.InlineKeyboardButton(
            text="–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
            web_app=WebAppInfo(url=f"{settings.WEBAPP_URL}?token={generate_token(update.effective_user.id)}")
        )
        keyboard = types.InlineKeyboardMarkup().add(webapp_button)
        
        await update.message.reply_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏ –∏ –æ–ø—Ä–æ—Å–∞–º–∏! ÔøΩÔøΩ\n\n"
            "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
            "üìÖ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è\n"
            "üìú –°–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—à–µ–¥—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è\n"
            "üìä –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –æ–ø—Ä–æ—Å–∞—Ö\n"
            "üó≥Ô∏è –í–∏–¥–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:",
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"Error in start handler: {str(e)}")
        raise

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    logger.debug("Entering button handler")
    query = update.callback_query
    await query.answer()
    
    logger.info(f"Button {query.data} pressed by user {update.effective_user.id}")
    
    try:
        if query.data == "my_subscriptions":
            logger.debug("Handling my_subscriptions")
            await query.message.reply_text("–í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")
        elif query.data == "help":
            logger.debug("Handling help")
            await query.message.reply_text(
                "–≠—Ç–æ –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏. "
                "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, "
                "–ø–æ–¥–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. "
                "\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ' –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞, "
                "—á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å."
            )
        elif query.data == "admin_panel" and update.effective_user.id in settings.ADMIN_USER_IDS:
            logger.debug("Handling admin_panel")
            admin_keyboard = [
                [InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", callback_data="create_event")],
                [InlineKeyboardButton("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏", callback_data="manage_events")]
            ]
            await query.message.reply_text(
                "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
                reply_markup=InlineKeyboardMarkup(admin_keyboard)
            )
    except Exception as e:
        logger.error(f"Error in button handler: {str(e)}")
        raise

async def check_reminders():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    logger.debug("Checking reminders")
    with Session(engine) as session:
        current_time = datetime.utcnow()
        reminders = session.query(Reminder).filter(
            Reminder.remind_at <= current_time,
            Reminder.sent == False
        ).all()
        
        for reminder in reminders:
            logger.debug(f"Processing reminder {reminder.id}")
            reminder.sent = True
            session.commit()

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    logger.info("Initializing bot application...")
    try:
        application = Application.builder().token(settings.BOT_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CallbackQueryHandler(button_handler))
        
        logger.info("Starting bot polling...")
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        application.run_polling(allowed_updates=Update.ALL_TYPES)
    except Exception as e:
        logger.error(f"Error starting bot: {str(e)}")
        raise

if __name__ == '__main__':
    main() 